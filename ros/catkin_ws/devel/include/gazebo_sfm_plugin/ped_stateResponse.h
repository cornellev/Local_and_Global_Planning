// Generated by gencpp from file gazebo_sfm_plugin/ped_stateResponse.msg
// DO NOT EDIT!


#ifndef GAZEBO_SFM_PLUGIN_MESSAGE_PED_STATERESPONSE_H
#define GAZEBO_SFM_PLUGIN_MESSAGE_PED_STATERESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace gazebo_sfm_plugin
{
template <class ContainerAllocator>
struct ped_stateResponse_
{
  typedef ped_stateResponse_<ContainerAllocator> Type;

  ped_stateResponse_()
    : px(0.0)
    , py(0.0)
    , pz(0.0)
    , vx(0.0)
    , vy(0.0)
    , theta(0.0)  {
    }
  ped_stateResponse_(const ContainerAllocator& _alloc)
    : px(0.0)
    , py(0.0)
    , pz(0.0)
    , vx(0.0)
    , vy(0.0)
    , theta(0.0)  {
  (void)_alloc;
    }



   typedef double _px_type;
  _px_type px;

   typedef double _py_type;
  _py_type py;

   typedef double _pz_type;
  _pz_type pz;

   typedef double _vx_type;
  _vx_type vx;

   typedef double _vy_type;
  _vy_type vy;

   typedef double _theta_type;
  _theta_type theta;





  typedef boost::shared_ptr< ::gazebo_sfm_plugin::ped_stateResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::gazebo_sfm_plugin::ped_stateResponse_<ContainerAllocator> const> ConstPtr;

}; // struct ped_stateResponse_

typedef ::gazebo_sfm_plugin::ped_stateResponse_<std::allocator<void> > ped_stateResponse;

typedef boost::shared_ptr< ::gazebo_sfm_plugin::ped_stateResponse > ped_stateResponsePtr;
typedef boost::shared_ptr< ::gazebo_sfm_plugin::ped_stateResponse const> ped_stateResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::gazebo_sfm_plugin::ped_stateResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::gazebo_sfm_plugin::ped_stateResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::gazebo_sfm_plugin::ped_stateResponse_<ContainerAllocator1> & lhs, const ::gazebo_sfm_plugin::ped_stateResponse_<ContainerAllocator2> & rhs)
{
  return lhs.px == rhs.px &&
    lhs.py == rhs.py &&
    lhs.pz == rhs.pz &&
    lhs.vx == rhs.vx &&
    lhs.vy == rhs.vy &&
    lhs.theta == rhs.theta;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::gazebo_sfm_plugin::ped_stateResponse_<ContainerAllocator1> & lhs, const ::gazebo_sfm_plugin::ped_stateResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace gazebo_sfm_plugin

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::gazebo_sfm_plugin::ped_stateResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::gazebo_sfm_plugin::ped_stateResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::gazebo_sfm_plugin::ped_stateResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::gazebo_sfm_plugin::ped_stateResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gazebo_sfm_plugin::ped_stateResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gazebo_sfm_plugin::ped_stateResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::gazebo_sfm_plugin::ped_stateResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fe93ccaed6c6e95dd709de214442996e";
  }

  static const char* value(const ::gazebo_sfm_plugin::ped_stateResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xfe93ccaed6c6e95dULL;
  static const uint64_t static_value2 = 0xd709de214442996eULL;
};

template<class ContainerAllocator>
struct DataType< ::gazebo_sfm_plugin::ped_stateResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "gazebo_sfm_plugin/ped_stateResponse";
  }

  static const char* value(const ::gazebo_sfm_plugin::ped_stateResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::gazebo_sfm_plugin::ped_stateResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# server\n"
"float64 px\n"
"float64 py\n"
"float64 pz\n"
"float64 vx\n"
"float64 vy\n"
"float64 theta\n"
;
  }

  static const char* value(const ::gazebo_sfm_plugin::ped_stateResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::gazebo_sfm_plugin::ped_stateResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.px);
      stream.next(m.py);
      stream.next(m.pz);
      stream.next(m.vx);
      stream.next(m.vy);
      stream.next(m.theta);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ped_stateResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::gazebo_sfm_plugin::ped_stateResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::gazebo_sfm_plugin::ped_stateResponse_<ContainerAllocator>& v)
  {
    s << indent << "px: ";
    Printer<double>::stream(s, indent + "  ", v.px);
    s << indent << "py: ";
    Printer<double>::stream(s, indent + "  ", v.py);
    s << indent << "pz: ";
    Printer<double>::stream(s, indent + "  ", v.pz);
    s << indent << "vx: ";
    Printer<double>::stream(s, indent + "  ", v.vx);
    s << indent << "vy: ";
    Printer<double>::stream(s, indent + "  ", v.vy);
    s << indent << "theta: ";
    Printer<double>::stream(s, indent + "  ", v.theta);
  }
};

} // namespace message_operations
} // namespace ros

#endif // GAZEBO_SFM_PLUGIN_MESSAGE_PED_STATERESPONSE_H
